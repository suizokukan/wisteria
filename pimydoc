### pimydoc : documentation source file
###
### Comment lines begin with ###
### If you modify STARTSYMB_IN_DOC please update ./check_code_quality.sh

[pimydoc]
### key : value (NOT key = value)
REGEX_SOURCE_FILTER : .+py$|.+sh$|.+md$|.+ini$

### (?P<doctitle>) is mandatory
REGEX_FIND_DOCTITLE : ^\[(?P<doctitle>.+)\]$

STARTSYMB_IN_DOC :⋅

PROFILE_PYTHON_SPACENBR_FOR_A_TAB : 4

REMOVE_FINAL_SPACES_IN_NEW_DOCLINES : True

### ==========================================================================
### ================================ SUMMARY =================================
### ==========================================================================
### (pimydoc)--cmp format
### (pimydoc)code structure
### (pimydoc)config file format
### (pimydoc)cwc modules names
### (pimydoc)DATA format
### (pimydoc)dataobjs_number
### (pimydoc)demonstration_dataobj
### (pimydoc)exit codes
### (pimydoc)GRAPHS_DESCRIPTION format
### (pimydoc)PLANNED_TRANSCODINGS
### (pimydoc)progress bar
### (pimydoc)report filename format
### (pimydoc)report sections
### (pimydoc)works_as_expected arguments and returned value

### ==========================================================================
[(pimydoc)--cmp format]

(I) serializers
Test one serializer alone(1) or one serializer against another serializer(2) or
a serializer against all serializers(3) or all serializers(4) together.

    (1) --cmp="jsonpickle(cwc)"
    (2) --cmp="jsonpickle vs pickle (cwc)"
    (3) --cmp="jsonpickle vs all (cwc)"
    (4) --cmp="all vs all (cwc)"

(II) data types:
Instead of 'cwc' (=compare what's comparable)(a) you may want to test all data types
but cwc(b) or data types defined in the config file(c) or absolutely all data types(d).

    (a) --cmp="jsonpickle vs pickle (cwc)"
    (b) --cmp="jsonpickle vs pickle (allbutcwc)"
    (c) --cmp="jsonpickle vs pickle (ini)"
    (d) --cmp="jsonpickle vs pickle (all)"

NB: You may use 'vs' as well as 'against', as if:
    --cmp="jsonpickle vs pickle (cwc)"
NB: globs.py::REGEX_CMP defines exactly the expected format
    globs.py::REGEX_CMP__HELP gives an idea of what is expected; this
                              string is used as help message by the
                              command line --help argument.

### ==========================================================================
[(pimydoc)code structure]
step A: command line arguments, --help message
- (A/00) minimal imports
- (A/01) command line parsing

step B: initializations & --checkup
- (B/02) normal imports & PLATFORM_SYSTEM initialization
- (B/03) wisteria.globs.ARGS initialization
- (B/04) a special case: if no argument has been given, we explicit the default values
- (B/05) --output string
- (B/06) reportfile opening
- (B/07) msgxxx() functions can be used
- (B/08) check STR2REPORTSECTION_KEYS and STR2REPORTSECTION
- (B/09) project name & version
- (B/10) ARGS.report interpretation
- (B/11) exit handler installation
- (B/12) serializers import
- (B/13) temp file opening
- (B/14) known data init (to be placed after 'temp file opening')
- (B/15) checkup
- (B/16) informations about the current machine
- (B/17) download default config file

step C: main()
- (C/18) call to main()
       - (C/18.1) main(): debug messages
       - (C/18.2) main(): cmp string interpretation
       - (C/18.3) main(): config file reading
       - (C/18.4) main(): PLANNED_TRANSCODINGS initialization
       - (C/18.5) main(): results computing
       - (C/18.6) main(): report

step D: exit_handler()
- (D/01) closing and removing of tempfile
- (D/02) closing wisteria.globs.FILECONSOLE_FILEOBJECT
- (D/03) (D/03) exported report
### ==========================================================================
[(pimydoc)config file format]

----------------------------------------------------------------
config file format                 read_cfgfile() returned value
----------------------------------------------------------------
(data selection)                   〖"data selection"〗 = {}
    data selection=all             〖"data selection"〗〖"data selection"〗 = str
                   only if yes
                   data set/xxx
data sets                          〖"data sets"〗= {}
    data set/xxx=                  〖"data sets"〗〖"data set/xxx"〗 = set1;set2;...
data objects
    set1 = yes or false             〖"data objects"〗〖"set1"〗 = (bool)True/False
    set2 = yes or false
    ...
### ==========================================================================
[(pimydoc)cwc modules names]

cwc modules names start with the "wisteria.cwc" string (cf is_a_cwc_name())

moduleininame        : e.g. "wisteria.cwc.pgnreader.default.chessgames"
modulefullrealname   : e.g. "wisteria.cwc.pgnreader.default.ChessGames"
waemodulename        : e.g. "wisteria.cwc.pgnreader.works_as_expected"
classname            : e.g. "ChessGames" (NOT "chessgames")
modulerealname       : e.g. "wisteria.cwc.pgnreader.default"

- `moduleininame` are defined in config file;
- conversion from `moduleininame` to `modulefullrealname` is defined in
  data.py:DATA and is made by function
  cwc_utils.py:moduleininame_to_modulefullrealname()
- conversion from `modulefullrealname` to `modulerealname` is made by
  function cwc_utils.py:modulefullrealname_to_modulerealname()
- DATA keys (for cwc modules) use `moduleininame`, NOT `modulefullrealname`
### ==========================================================================
[(pimydoc)DATA format]
Initialized by data.py::init_data()

- for Python basic types, DATA values are the real value:
    e.g. DATA["bool/false"] = False
- for cwc modules, DATA keys are the ini name (not the real name)
  and DATA values are the real name:
    e.g. DATA["wisteria.cwc.pgnreader.iaswn.ChessGames"] =
        "wisteria.cwc.pgnreader.iaswn.chessgames"
- for third party types, DATA values are the real value:
    e.g. DATA["dateutil(parser.parse)"] = dateutil.parser.parse("2021-03-04")
###
### ==========================================================================
[(pimydoc)dataobjs_number]
MAY NOT BE len(self.dataobjs) since cwc variants are treated as one dataobject:
e.g. "wisteria.cwc.pgnreader.default.ChessGame" and
      "wisteria.cwc.pgnreader.iaswn.ChessGame"
      ... will be counted as ONE data object.
(class variable initialized in initialization in finish_initialization())
### ==========================================================================
[(pimydoc)demonstration_dataobj]
Data object used to show the encoded strings created by the serializers.

The choice of data is very small because all serializers must be able
to encode it. By example, no None object because of Amazon Ion Python.
### ==========================================================================
[(pimydoc)exit codes]
*  0: normal exit code
*  1: normal exit code after --checkup
*  2: normal exit code after --downloadconfigfile
*  3: normal exit code after --mymachine
*  4: normal exit code (no data to handle)
* -1: error, given config file can't be read (missing or ill-formed file)
* -2: error, ill-formed --cmp string
* -3: error, ill-formed --output string
* -4: error, missing required module
* -8: error, STR2REPORTSECTION_KEYS and STR2REPORTSECTION don't match
* -100: internal error, data can't be loaded
* -101: internal error, an error occured while computing the results
* -102: internal error, an error occured in main()
* -103: internal error, can't initialize PLANNED_TRANSCODINGS    
### ==========================================================================
[(pimydoc)GRAPHS_DESCRIPTION format]
Use GRAPHS_DESCRIPTION to store the description of each graph created by the
report; each description is passed to hbar2png(). Note that
len(GRAPHS_DESCRIPTION) gives the number of graphs to be created.

- (str)attribute   : hbar2png will read results.hall[attribute]
- (str)fmtstring   : format string to be applied to each value when printed
                     on the graph; e.g. '{0}' or '{0:.1f}'
- (int)value_coeff : each value will be multiplied by this number
- (str)unit        : x unit
- (str)title       : graph title
- (str)filename    : file name to be written
### ===========================================================================
[(pimydoc)PLANNED_TRANSCODINGS]
list of str:
    (str)serializer, (str)data_name, (str)fingerprint

Initialized by results.py:init_planned_transcodings()
### ===========================================================================
[(pimydoc)progress bar]
A progress bar is displayed only if verbosity is set to 1 (normal).
If verbosity is set to 0 (minimal), the progress bar is hidden since no
console output is authorized: it's important for scripts calling the
project from the outside.
If verbosity is set to 2 (details) or 3 (debug), the progress bar is hidden
in order to avoid mixing the progress bar with the text displayed while
computing the result, which is unpleasant to see.
### ==========================================================================
[(pimydoc)report filename format]
* either a simple string like 'report.txt'
* either a string containing 'DATETIME'; in this case, 'DATETIME' will
  be replaced by datetime.datetime.now().strftime("%Y-%m-%d.%H.%M.%S");
  e.g. "report_DATETIME.txt" would become something like
       "report_2021-12-31.23.59.59.txt"
* either a string containing 'TIMESTAMP'; in this case, 'TIMESTAMP' will
  be replaced by str(int(time.time()))
    e.g. "report_DATETIME.txt" would become something like
         "report_1635672267.txt"
### ==========================================================================
[(pimydoc)report sections]
* A         : main informations
  - A1      : options used to create reports
  - A2      : list of the serializers to be used
  - A3      : list of the data objects to be used
* B         : full details (raw results)
  - B1      : full details (serializers)
    . B1a   : full details: serializer * data object
    . B1b   : full details: serializers
    . B1c   : full details: serializers, hall of fame
    . B1d   : full details: full details: serializer <S> can't handle <dataobj>
  - B2      : full details (data objects)
    . B2a   : full details: data object * serializer
    . B2b   : full details: data objects
* C         : conclusions
  - C1      : conclusion: data objects handled/not handled by the serializer(s)
    . C1a   : conclusion: data objects handled by the serializer(s)
    . C1b   : conclusion: data objects NOT handled by the serializer(s)
  - C2      : conclusion: final text and data
    . C2a   : conclusion: serializers (not sorted)
    . C2b   : conclusion: overall score (based on: Σ strlen./Σ enc+dec time/enc⇆dec)
    . C2c   : conclusion
* D         : various informations
  - D1      : informations about the machine
    . D1a   : informations about the machine (no extensive details)
    . D1b   : informations about the machine (extensive details)
* graphs    : graphic visualizations
### ===========================================================================
[(pimydoc)works_as_expected arguments and returned value]
All works_as_expected() functions are supposed to (1) say if <data_name> is in
the scope of this function (2) and say if <obj> works as expected.

ARGUMENTS:
    o  data_name:   (None or str)data_name of the <obj>ect
    o  obj:         (None or any object) object to be checked

RETURNED VALUE:
    (<obj> is None, <data_name> is not None) (bool)<data_name> is known
    (<obj> is not None, <data_name> may be None or a str.) <obj> works as expected.
